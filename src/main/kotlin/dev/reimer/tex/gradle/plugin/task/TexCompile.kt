package dev.reimer.tex.gradle.plugin.task

import dev.reimer.tex.gradle.plugin.TexPlugin
import dev.reimer.tex.gradle.plugin.compiler.CompilerFactory
import dev.reimer.tex.gradle.plugin.directoryProperty
import dev.reimer.tex.gradle.plugin.internal.FileExtensions.TEX
import dev.reimer.tex.gradle.plugin.internal.TexCompileFileFilter
import dev.reimer.tex.gradle.plugin.property
import dev.reimer.tex.gradle.plugin.texExtension
import org.gradle.api.file.RelativePath
import org.gradle.api.tasks.*
import org.gradle.kotlin.dsl.register
import java.io.File
import java.io.FileFilter

/**
 * Compile a TeX project.
 */
open class TexCompile : FilteredSourceTask() {

    @Internal
    override fun getGroup() = TexPlugin.TASK_GROUP

    @Internal
    override fun getDescription() = "Compiles TeX sources."

    @get:Input
    val bibliographyCompiler = project.property(texExtension.bibliographyCompiler)

    @get:Input
    val texCompiler = project.property(texExtension.texCompiler)

    @get:Input
    val imageConverter = project.property(texExtension.imageConverter)

    @get:Input
    val quiet = project.property(texExtension.quiet)

    @get:Input
    val overwrite = project.property(texExtension.overwrite)

    @get:Optional
    @get:OutputDirectory
    val destinationDir = project.directoryProperty { project.file("out") }

    override val fileFilter: FileFilter = TexCompileFileFilter(project)

    /**
     * Build dir for auxiliary files, generated by the TeX compiler, e.g. `build/tex/taskName/`.
     */
    @get:Internal
    val buildDir = project.directoryProperty {
        project.buildDir.resolve(TexPlugin.EXTENSION_NAME).resolve(name)
    }

    init {
        val generateResources = let { tex ->
            project.tasks.register<TexResources>(
                "generateResourcesFor${name.capitalize()}"
            ) {
                imageConverter.set(tex.imageConverter)
                destinationDir.set(tex.buildDir)
                setSource(tex.source)
            }
        }

        project.afterEvaluate {
            dependsOn(generateResources)
        }
    }

    @TaskAction
    fun compile() {
        compileAll()
    }

    private val buildDirFile
        get() = buildDir.get().asFile

    private val destinationDirFile: File?
        get() = destinationDir.orNull?.asFile

    private fun clearBuildDir() {
        buildDirFile.deleteRecursively()
    }

    private fun compileAll() {
        source.visit { element ->
            if (element.file.extension == TEX && element.file.isFile) {
                clearBuildDir()
                compileSingle(element.file, element.relativePath)
            }
        }
    }

    private fun compileSingle(texFile: File, path: RelativePath) {
        compileTex(texFile, path)
        if (compileBibliography(texFile, path)) {
            compileTex(texFile, path)
        }
        compileTex(texFile, path)
    }

    private fun compileTex(texFile: File, path: RelativePath) {
        val destinationDirFile = destinationDirFile
        val destinationDir: File = if (destinationDirFile != null) {
            destinationDirFile.resolve(path.pathString).parentFile
        } else {
            texFile.parentFile
        }

        val task = CompilerFactory.createTexCompiler(project, texCompiler.get())
        task.tex.set(texFile)
        task.quiet.set(quiet)
        task.overwrite.set(overwrite)
        task.destinationDir.set(destinationDir)
        task.buildDir.set(buildDir)
        task.compileTex()
    }

    private fun compileBibliography(texFile: File, path: RelativePath): Boolean {
        val jobName = path.lastName.substringBeforeLast('.')
        val task = CompilerFactory.createBibliographyCompiler(project, bibliographyCompiler.get())
        task.jobName.set(jobName)
        task.buildDir.set(buildDir)
        task.sourceDir.set(texFile.parentFile)
        task.compile()
        return task.didWork
    }
}